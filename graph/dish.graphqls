type MultiLanguage_D {
	lang: String!
	data: String
}

type IngredientsInDish {
	quantity: Float!
	slug: String!
	note: String
}

type Dish {
	slug: String!
	title: [MultiLanguage_D]!
	shortDescription: [MultiLanguage_D]!
	content: [MultiLanguage_D]!
	tags: [String]!
	preparationTime: Float
	cookingTime: Float
	difficultLevel: String
	mealCategories: [String]!
	ingredientCategories: [String]!
	thumbnail: String
	videos: [String]!
	ingredients: [IngredientsInDish]!
	relatedDishes: [String]!
	deleted: Boolean!
	deletedAt: Time
	deletedBy: String
	updatedAt: Time
	updatedBy: String
	createdAt: Time
	createdBy: String
	_id: ID!
}

input IngredientsInDishInput {
	quantity: Float!
	slug: String!
	note: String
}

input MultiLanguageInput_D {
	lang: String!
	data: String
}

input CreateDishInput {
	slug: String!
	title: [MultiLanguageInput_D]!
	shortDescription: [MultiLanguageInput_D]!
	content: [MultiLanguageInput_D]!
	tags: [String]!
	preparationTime: Float
	cookingTime: Float
	difficultLevel: String
	mealCategories: [String]!
	ingredientCategories: [String]!
	thumbnail: String
	videos: [String]!
	ingredients: [IngredientsInDishInput]!
	relatedDishes: [String]!
}

input UpdateDishInput {
	slug: String!
	title: [MultiLanguageInput_D]!
	shortDescription: [MultiLanguageInput_D]!
	content: [MultiLanguageInput_D]!
	tags: [String]!
	preparationTime: Float
	cookingTime: Float
	difficultLevel: String
	mealCategories: [String]!
	ingredientCategories: [String]!
	thumbnail: String
	videos: [String]!
	ingredients: [IngredientsInDishInput]!
	relatedDishes: [String]!
}

extend type Query {
	dishes(
		keyword: String
		page: Int = 1
		limit: Int = 10
		tags: String
		preparationTimeFrom: Int
		preparationTimeTo: Int
		cookingTimeFrom: Int
		cookingTimeTo: Int
		difficultLevels: String
		mealCategories: String
		ingredientCategories: String
		ingredients: String
	): [Dish]! @hasRole(role: FIND_DISHES)
	dish(slug: String!): Dish @hasRole(role: FIND_DISH)
}

extend type Mutation {
	createDish(createDishInput: CreateDishInput!): Dish! @hasRole(role: CREATE_DISH)
	updateDish(updateDishInput: UpdateDishInput!): Dish! @hasRole(role: UPDATE_DISH)
	removeDish(slug: String!): Dish! @hasRole(role: DELETE_DISH)
}
