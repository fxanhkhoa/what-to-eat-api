package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"what-to-eat/be/auth"
	"what-to-eat/be/graph/model"
	"what-to-eat/be/graph/service"
)

// CreateRolePermission is the resolver for the createRolePermission field.
func (r *mutationResolver) CreateRolePermission(ctx context.Context, createRoleInput model.CreateRolePermissionInput) (*model.RolePermission, error) {
	user := auth.ForContext(ctx)
	rolePermission, err := service.NewRolePermissionService().Create(createRoleInput, user)
	return rolePermission, err
}

// UpdateRolePermission is the resolver for the updateRolePermission field.
func (r *mutationResolver) UpdateRolePermission(ctx context.Context, updateRoleInput model.UpdateRolePermissionInput) (*model.RolePermission, error) {
	user := auth.ForContext(ctx)
	rolePermission, err := service.NewRolePermissionService().Update(updateRoleInput, user)
	return rolePermission, err
}

// RemoveRolePermission is the resolver for the removeRolePermission field.
func (r *mutationResolver) RemoveRolePermission(ctx context.Context, id string) (*model.RolePermission, error) {
	user := auth.ForContext(ctx)
	rolePermission, err := service.NewRolePermissionService().Remove(id, user)
	return rolePermission, err
}

// RolePermissions is the resolver for the rolePermissions field.
func (r *queryResolver) RolePermissions(ctx context.Context, page *int, limit *int) ([]*model.RolePermission, error) {
	rolePermissions, err := service.NewRolePermissionService().Find(page, limit)
	return rolePermissions, err
}

// RolePermission is the resolver for the rolePermission field.
func (r *queryResolver) RolePermission(ctx context.Context, id string) (*model.RolePermission, error) {
	rolePermission, err := service.NewRolePermissionService().FindOne(id)
	return rolePermission, err
}

// RolePermissionByName is the resolver for the rolePermissionByName field.
func (r *queryResolver) RolePermissionByName(ctx context.Context, name string) (*model.RolePermission, error) {
	rolePermission, err := service.NewRolePermissionService().FindByName(name)
	return rolePermission, err
}

// AllPermissions is the resolver for the allPermissions field.
func (r *queryResolver) AllPermissions(ctx context.Context, limit *int) ([]*string, error) {
	var roles []*string
	for _, v := range model.AllRole {
		str := v.String()
		roles = append(roles, &str)
	}

	return roles, nil
}
