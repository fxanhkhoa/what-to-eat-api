package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"time"
	"what-to-eat/be/graph/model"

	"go.mongodb.org/mongo-driver/bson"
)

// CreateIngredient is the resolver for the createIngredient field.
func (r *mutationResolver) CreateIngredient(ctx context.Context, createIngredientInput model.CreateIngredientInput) (*model.Ingredient, error) {
	ctxMongo, collection := Init("what-to-eat", "Ingredients")
	ingredient := model.Ingredient{
		Slug:               createIngredientInput.Slug,
		Title:              title,
		Measure:            createIngredientInput.Measure,
		Calories:           createIngredientInput.Calories,
		Carbohydrate:       createIngredientInput.Carbohydrate,
		Fat:                createIngredientInput.Fat,
		IngredientCategory: createIngredientInput.IngredientCategory,
		Weight:             createIngredientInput.Weight,
		Protein:            createIngredientInput.Protein,
		Cholesterol:        createIngredientInput.Cholesterol,
		Sodium:             createIngredientInput.Sodium,
		Deleted:            false,
		UpdatedAt:          time.Now().Format(time.RFC3339),
		UpdatedBy:          "",
		CreatedAt:          time.Now().Format(time.RFC3339),
		CreatedBy:          "",
	}
	doc := bson.M{}
	for key, val := range createIngredientInput {

	}
	collection.InsertOne(ctxMongo, ingredient)
}

// UpdateIngredient is the resolver for the updateIngredient field.
func (r *mutationResolver) UpdateIngredient(ctx context.Context, updateIngredientInput model.UpdateIngredientInput) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: UpdateIngredient - updateIngredient"))
}

// RemoveIngredient is the resolver for the removeIngredient field.
func (r *mutationResolver) RemoveIngredient(ctx context.Context, slug string) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: RemoveIngredient - removeIngredient"))
}

// Ingredients is the resolver for the ingredients field.
func (r *queryResolver) Ingredients(ctx context.Context, keyword *string, page *int, limit *int) ([]*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: Ingredients - ingredients"))
}

// Ingredient is the resolver for the ingredient field.
func (r *queryResolver) Ingredient(ctx context.Context, slug string) (*model.Ingredient, error) {
	panic(fmt.Errorf("not implemented: Ingredient - ingredient"))
}
