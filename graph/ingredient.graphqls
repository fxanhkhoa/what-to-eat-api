type MultiLanguage {
	lang: String!
	data: String
}

type Ingredient {
	slug: String!
	title: [MultiLanguage]!
	measure: String
	calories: Int
	carbohydrate: Int
	fat: Int
	ingredientCategory: [String]!
	weight: Int
	protein: Int
	cholesterol: Int
	sodium: Int
	images: [String]!
	deleted: Boolean!
	deletedAt: Time
	deletedBy: String
	updatedAt: Time
	updatedBy: String
	createdAt: Time
	createdBy: String
	_id: ID!
}

input MultiLanguageInput {
	lang: String!
	data: String
}

input CreateIngredientInput {
	slug: String!
	title: [MultiLanguageInput]!
	measure: String
	calories: Int
	carbohydrate: Int
	fat: Int
	ingredientCategory: [String]!
	weight: Int
	protein: Int
	cholesterol: Int
	sodium: Int
	images: [String]!
}

input UpdateIngredientInput {
	slug: String!
	title: [MultiLanguageInput]!
	measure: String
	calories: Int
	carbohydrate: Int
	fat: Int
	ingredientCategory: [String]!
	images: [String]!
	weight: Int
	protein: Int
	cholesterol: Int
	sodium: Int
}

extend type Query {
	ingredients(keyword: String, page: Int = 1, limit: Int = 10): [Ingredient]! @hasRole(role: FIND_INGREDIENTS)
	ingredient(slug: String!): Ingredient @hasRole(role: FIND_INGREDIENT)
}

extend type Mutation {
	createIngredient(createIngredientInput: CreateIngredientInput!): Ingredient! @hasRole(role: CREATE_INGREDIENT)
	updateIngredient(updateIngredientInput: UpdateIngredientInput!): Ingredient! @hasRole(role: UPDATE_INGREDIENT)
	removeIngredient(slug: String!): Ingredient! @hasRole(role: DELETE_INGREDIENT)
}
