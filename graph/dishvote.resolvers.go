package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"what-to-eat/be/auth"
	"what-to-eat/be/graph/model"
	"what-to-eat/be/graph/service"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CreateDishVote is the resolver for the createDishVote field.
func (r *mutationResolver) CreateDishVote(ctx context.Context, createDishVoteInput model.CreateDishVoteInput) (*model.DishVoteInsertOneResult, error) {
	user := auth.ForContext(ctx)
	dishVote, err := service.NewDishVoteService().Create(createDishVoteInput, user)
	s := dishVote.InsertedID.(primitive.ObjectID).String()
	result := &model.DishVoteInsertOneResult{InsertedID: &s}
	return result, err
}

// UpdateDishVote is the resolver for the updateDishVote field.
func (r *mutationResolver) UpdateDishVote(ctx context.Context, updateDishVoteInput model.UpdateDishVoteInput) (*model.DishVote, error) {
	user := auth.ForContext(ctx)
	dishVote, err := service.NewDishVoteService().Update(updateDishVoteInput, user)
	return dishVote, err
}

// RemoveDishVote is the resolver for the removeDishVote field.
func (r *mutationResolver) RemoveDishVote(ctx context.Context, id string) (*model.DishVote, error) {
	user := auth.ForContext(ctx)
	dishVote, err := service.NewDishVoteService().Remove(id, user)
	return dishVote, err
}

// DishVotes is the resolver for the dishVotes field.
func (r *queryResolver) DishVotes(ctx context.Context, keyword *string, page *int, limit *int) ([]*model.DishVote, error) {
	dishVotes, err := service.NewDishVoteService().Find(
		keyword,
		page,
		limit)
	return dishVotes, err
}

// DishVote is the resolver for the dishVote field.
func (r *queryResolver) DishVote(ctx context.Context, id string) (*model.DishVote, error) {
	dishVote, err := service.NewDishVoteService().FindOne(id)
	return dishVote, err
}
