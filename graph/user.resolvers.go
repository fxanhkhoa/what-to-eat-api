package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"what-to-eat/be/auth"
	"what-to-eat/be/graph/model"
	"what-to-eat/be/graph/service"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, createUserInput model.CreateUserInput) (*model.User, error) {
	user := auth.ForContext(ctx)
	createdUser, err := service.NewUserService().Create(createUserInput, user)
	return createdUser, err
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, updateUserInput model.UpdateUserInput) (*model.User, error) {
	user := auth.ForContext(ctx)
	updatedUser, err := service.NewUserService().Update(updateUserInput, user)
	return updatedUser, err
}

// RemoveUser is the resolver for the removeUser field.
func (r *mutationResolver) RemoveUser(ctx context.Context, id string) (*model.User, error) {
	user := auth.ForContext(ctx)
	updatedUser, err := service.NewUserService().Remove(id, user)
	return updatedUser, err
}

// UpdateRoleUser is the resolver for the updateRoleUser field.
func (r *mutationResolver) UpdateRoleUser(ctx context.Context, updateRoleUserInput model.UpdateRoleUserInput) (*model.User, error) {
	user := auth.ForContext(ctx)
	updatedUser, err := service.NewUserService().UpdateRole(updateRoleUserInput.ID, updateRoleUserInput.RoleName, user)
	return updatedUser, err
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, keyword *string, page *int, limit *int) ([]*model.User, error) {
	users, err := service.NewUserService().Find(keyword, page, limit)
	return users, err
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := service.NewUserService().FindOne(id)
	return user, err
}

// UserByEmail is the resolver for the userByEmail field.
func (r *queryResolver) UserByEmail(ctx context.Context, email string) (*model.User, error) {
	user, err := service.NewUserService().FindByEmail(email)
	return user, err
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
